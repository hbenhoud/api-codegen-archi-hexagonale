// Code generated by MockGen. DO NOT EDIT.
// Source: openapi.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOpenAPI is a mock of OpenAPI interface.
type MockOpenAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOpenAPIMockRecorder
}

// MockOpenAPIMockRecorder is the mock recorder for MockOpenAPI.
type MockOpenAPIMockRecorder struct {
	mock *MockOpenAPI
}

// NewMockOpenAPI creates a new mock instance.
func NewMockOpenAPI(ctrl *gomock.Controller) *MockOpenAPI {
	mock := &MockOpenAPI{ctrl: ctrl}
	mock.recorder = &MockOpenAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenAPI) EXPECT() *MockOpenAPIMockRecorder {
	return m.recorder
}

// ValidateRequest mocks base method.
func (m *MockOpenAPI) ValidateRequest(ctx context.Context, req *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRequest", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRequest indicates an expected call of ValidateRequest.
func (mr *MockOpenAPIMockRecorder) ValidateRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRequest", reflect.TypeOf((*MockOpenAPI)(nil).ValidateRequest), ctx, req)
}

// ValidateResponse mocks base method.
func (m *MockOpenAPI) ValidateResponse(ctx context.Context, req *http.Request, resp *http.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateResponse", ctx, req, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateResponse indicates an expected call of ValidateResponse.
func (mr *MockOpenAPIMockRecorder) ValidateResponse(ctx, req, resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateResponse", reflect.TypeOf((*MockOpenAPI)(nil).ValidateResponse), ctx, req, resp)
}
